// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShadowIndexerProperties;

namespace ShadowIndexerProperties.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20210420004245_initailize-9")]
    partial class initailize9
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PostTag", b =>
                {
                    b.Property<int>("PostsPostId")
                        .HasColumnType("int");

                    b.Property<string>("TagsTagId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PostsPostId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("ShadowIndexerProperties.MyContext+Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BlogId");

                    b.HasIndex("Url")
                        .IsUnique()
                        .HasDatabaseName("Index_Url")
                        .HasFilter("[Url] IS NOT NULL");

                    b.HasIndex(new[] { "Url" }, "Index_Url")
                        .IsUnique()
                        .HasFilter("[Url] IS NOT NULL");

                    b.ToTable("Blogs");

                    b.HasDiscriminator<string>("Discriminator").HasValue("blog_base");
                });

            modelBuilder.Entity("ShadowIndexerProperties.MyContext+BlogImage", b =>
                {
                    b.Property<int>("BlogImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("BlogImageId");

                    b.HasIndex("BlogId")
                        .IsUnique();

                    b.ToTable("BlogImage");
                });

            modelBuilder.Entity("ShadowIndexerProperties.MyContext+Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PersonId");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("ShadowIndexerProperties.MyContext+Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorUserId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContributorUserId")
                        .HasColumnType("int");

                    b.Property<string>("ContributorUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.HasIndex("AuthorUserId1");

                    b.HasIndex("BlogId");

                    b.HasIndex("ContributorUserId1");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ShadowIndexerProperties.MyContext+Tag", b =>
                {
                    b.Property<string>("TagId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ShadowIndexerProperties.MyContext+User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ShadowIndexerProperties.MyContext+RssBlog", b =>
                {
                    b.HasBaseType("ShadowIndexerProperties.MyContext+Blog");

                    b.Property<string>("RssUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("blog_rss");
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.HasOne("ShadowIndexerProperties.MyContext+Post", null)
                        .WithMany()
                        .HasForeignKey("PostsPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShadowIndexerProperties.MyContext+Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShadowIndexerProperties.MyContext+BlogImage", b =>
                {
                    b.HasOne("ShadowIndexerProperties.MyContext+Blog", "Blog")
                        .WithOne("BlogImage")
                        .HasForeignKey("ShadowIndexerProperties.MyContext+BlogImage", "BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("ShadowIndexerProperties.MyContext+Post", b =>
                {
                    b.HasOne("ShadowIndexerProperties.MyContext+User", "Author")
                        .WithMany("AuthoredPosts")
                        .HasForeignKey("AuthorUserId1");

                    b.HasOne("ShadowIndexerProperties.MyContext+Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShadowIndexerProperties.MyContext+User", "Contributor")
                        .WithMany("ContributedToPosts")
                        .HasForeignKey("ContributorUserId1");

                    b.Navigation("Author");

                    b.Navigation("Blog");

                    b.Navigation("Contributor");
                });

            modelBuilder.Entity("ShadowIndexerProperties.MyContext+Blog", b =>
                {
                    b.Navigation("BlogImage");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("ShadowIndexerProperties.MyContext+User", b =>
                {
                    b.Navigation("AuthoredPosts");

                    b.Navigation("ContributedToPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
